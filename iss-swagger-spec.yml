openapi: 3.0.3
info:
  title: Inženjerstvo serverskog sloja - projekat 2022
  version: 2.0.0
tags:
  - name: passenger
    description: Passenger functionalities
  - name: driver
    description: Driver functionalities
  - name: ride
    description: Ride functionalities
  - name: review
    description: Review functionalities
  - name: panic
    description: Panic functionalities
  - name: vehicle
    description: Vehicle functionalities
  - name: user
    description: User functionalities
  - name: unregistered user
    description: Unregistered user functionalities
paths:
  /api/passenger:
    post:
      tags:
        - passenger
      summary: Create passenger
      description: Create new passenger
      operationId: createPassenger
      requestBody:
        $ref: "#/components/requestBodies/CreateUser"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        format: integer
                        example: 123
                  - $ref: "#/components/schemas/User"
        "400":
          description: User with that email already exists!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - passenger
      summary: Getting passengers
      description: Getting multiple passengers for the need of showing a list
      operationId: gettingPassengers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Which page
        - in: query
          name: size
          schema:
            type: integer
          description: How many elements on page
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                id:
                                  type: integer
                                  format: integer
                                  example: 10
                            - $ref: "#/components/schemas/User"
  /api/passenger/activate/{activationId}:
    get:
      tags:
        - passenger
      summary: Activate passenger account
      description: Activating passenger with the activation email
      operationId: activatePassenger
      parameters:
        - name: activationId
          in: path
          description: Id of the passenger
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful account activation!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "400":
          description: Activation expired. Register again!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Activation with entered id does not exist!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/passenger/{id}:
    get:
      tags:
        - passenger
      summary: Passenger details
      description: Returns passenger details, where the password field is always empty
      operationId: passengerDetails
      parameters:
        - name: id
          in: path
          description: Id of the passenger
          required: true
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/requestBodies/UserDetails"
        "404":
          description: Passenger does not exist!
    put:
      tags:
        - passenger
      summary: Update existing passenger
      description: Update existing passenger non required fields send only if they change
      operationId: updatePassenger
      parameters:
        - name: id
          in: path
          description: Id of the passenger
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  required:
                    - name
                    - surname
                    - email
                    - address
        required: true
      responses:
        "200":
          $ref: "#/components/requestBodies/UserDetails"
        "404":
          description: Passenger does not exist!
  /api/passenger/{id}/ride:
    get:
      tags:
        - passenger
      summary: Passenger rides
      description: Returns paginated rides that can be sorted on specific field
      operationId: voznjePutnika
      parameters:
        - name: id
          in: path
          description: ID putnika
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            format: integer
          description: Which page
        - in: query
          name: size
          schema:
            type: integer
            format: integer
          description: how many elements on page
        - in: query
          name: sort
          schema:
            type: string
            format: string
            example: firstName
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          description: Početak intervala
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          description: Kraj intervala
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Ride"
        "404":
          description: Passenger does not exist!
  /api/driver:
    post:
      tags:
        - driver
      summary: Create driver
      description: Create new driver
      operationId: createDriver
      requestBody:
        $ref: "#/components/requestBodies/CreateUser"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        format: integer
                        example: 123
                  - $ref: "#/components/schemas/User"
        "400":
          description: User with that email already exists!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - driver
      summary: Getting paginated driver data
      description: Returns paginated drivers
      operationId: gettingDrivers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Which page
        - in: query
          name: size
          schema:
            type: integer
          description: How meni elements from it
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                id:
                                  type: integer
                                  format: integer
                                  example: 10
                            - $ref: "#/components/schemas/User"
  /api/driver/{id}:
    get:
      tags:
        - driver
      summary: Driver details
      description: Returns details about the driver
      operationId: driverDetails
      parameters:
        - name: id
          in: path
          description: ID of the driver
          required: true
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/requestBodies/UserDetails"
        "404":
          description: Driver does not exist!
    put:
      tags:
        - driver
      summary: Update existing driver
      description: Update the existing driver based on his id
      operationId: updateDriver
      parameters:
        - name: id
          in: path
          description: ID vozača
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  required:
                    - name
                    - surname
                    - email
                    - address
        required: true
      responses:
        "200":
          $ref: "#/components/requestBodies/UserDetails"
        "400":
          description: Invalid data. For example bad email format.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Driver does not exist!
  /api/driver/{id}/documents:
    get:
      tags:
        - driver
      summary: Driver documents
      description: Returns all documents with the specific id
      operationId: driverDocuments
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        id:
                          type: integer
                          format: integer
                          example: 123
                    - $ref: "#/components/schemas/DriverDocument"
        "404":
          description: Driver does not exist!
    post:
      tags:
        - driver
      summary: Adding new driver documents
      description: Adding new driver document (for example a picture)
      operationId: addDriverDocument
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - documentImage
              properties:
                name:
                  type: string
                  example: Vozačka dozvola
                  maxLength: 100
                documentImage:
                  type: string
                  format: byte
                  example: U3dhZ2dlciByb2Nrcw=
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        format: integer
                        example: 123
                  - $ref: "#/components/schemas/DriverDocument"
        "400":
          description: File is bigger than 5mb!//File is not an image!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Driver does not exist!
  /api/driver/document/{document-id}:
    delete:
      tags:
        - driver
      summary: Delete driver's document by id
      description: Delete driver's document by id
      operationId: deleteDriverDocument
      parameters:
        - name: document-id
          in: path
          description: Id of the document
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Driver document deleted successfully
        "404":
          description: Document does not exist!
  /api/driver/{id}/vehicle:
    get:
      tags:
        - driver
      summary: Vehicle of the driver
      description: Returns vehicle for the driver
      operationId: driversVehicle
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        format: integer
                        example: 123
                      driverId:
                        type: integer
                        format: integer
                        example: 123
                  - $ref: "#/components/schemas/Vehicle"
        "400":
          description: Vehicle is not assigned!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Driver does not exist!
    post:
      tags:
        - driver
      summary: Add vehicle to the driver
      description: Creating a new vehicle to the driver while creating one if it does not exist
      operationId: createVehicle
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Vehicle"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        format: integer
                        example: 123
                      driverId:
                        type: integer
                        format: integer
                        example: 123
                  - $ref: "#/components/schemas/Vehicle"
        "404":
          description: Driver does not exist!
    put:
      tags:
        - driver
      summary: Change the vehicle of the driver
      description: Change the vehicle of the driver
      operationId: changeVehicle
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Vehicle"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        format: integer
                        example: 123
                      driverId:
                        type: integer
                        format: integer
                        example: 123
                  - $ref: "#/components/schemas/Vehicle"
        "404":
          description: Driver does not exist!

  /api/driver/{id}/working-hour:
    get:
      tags:
        - driver
      summary: Working hours of the driver
      description: Returns history of the drivers working hours where it can be filtered by date
      operationId: workingHoursOverview
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            format: integer
          description: Which page to retrieve
        - in: query
          name: size
          schema:
            type: integer
            format: integer
          description: How many items to retrieve
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          description: Start of the interval
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          description: End of the interval
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/WorkingHour"
        "404":
          description: Driver does not exist!
    post:
      tags:
        - driver
      summary: Creating informations about the drivers working hours
      description: Creating informations about the drivers working hours
      operationId: createWorkingHours
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkingHourStart"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkingHour"
        "400":
          description: Cannot start shift because you exceeded the 8 hours limit in last 24 hours!//Cannot start shift because the vehicle is not defined!//Shifth already ongoing!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Driver does not exist!

  /api/driver/{id}/ride:
    get:
      tags:
        - driver
      summary: Rides of the specific driver
      description: Returning rides for the driver that can be sorted by specific fields
      operationId: driversRides
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            format: integer
            example: 2
        - in: query
          name: size
          schema:
            type: integer
            format: integer
            example: 10
        - in: query
          name: sort
          schema:
            type: string
            format: string
            example: startTime
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          description: Start of the interval
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          description: End of the interval
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Ride"
        "404":
          description: Driver does not exist!

  /api/driver/working-hour/{working-hour-id}:
    get:
      tags:
        - driver
      summary: Detais about the working hours of the driver
      description: Returns details about the individual working hours of the driver
      operationId: workingHourDetails
      parameters:
        - name: working-hour-id
          in: path
          description: Id of the working hour
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkingHour"
        "404":
          description: Working hour does not exist!
    put:
      tags:
        - driver
      summary: Changing the working hours
      description: Changing individual working hours of the driver
      operationId: changingWorkingHours
      parameters:
        - name: working-hour-id
          in: path
          description: Id of the working hour
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkingHourEnd"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkingHour"
        "400":
          description: Cannot end shift because the vehicle is not defined!//No shift is ongoing!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Working hour does not exist!

  /api/ride:
    post:
      tags:
        - ride
      summary: Creating a ride
      description: Creating a ride
      operationId: creatingRide
      requestBody:
        $ref: "#/components/requestBodies/RideCreation"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: PENDING
        "400":
          description: Cannot create a ride while you have one already pending!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/ride/driver/{driverId}/active:
    get:
      tags:
        - ride
      summary: Active ride for driver
      description: Return active ride details for the driver
      operationId: activeRideDriverDetails
      parameters:
        - name: driverId
          in: path
          required: true
          schema:
            type: integer
          description: Which driver
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: PENDING
        "404":
          description: Active ride does not exist!
  /api/ride/passenger/{passengerId}/active:
    get:
      tags:
        - ride
      summary: Active ride for passenger
      description: Return active ride details for the passenger
      operationId: activeRidePassengerDetails
      parameters:
        - name: passengerId
          in: path
          required: true
          schema:
            type: integer
          description: Which driver
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: PENDING
        "404":
          description: Active ride does not exist!
  /api/ride/{id}:
    get:
      tags:
        - ride
      summary: Ride details
      description: Return ride details with the specific id
      operationId: rideDetails
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: PENDING
        "400":
          description: Invalid data. For example bad Id format.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Ride does not exist!
  /api/ride/{id}/withdraw:
    put:
      tags:
        - ride
      summary: Cancel existing ride
      description: The passenger should have the possibility to cancel an existing ride if he changed his mind before the driver has arrived at the destination
      operationId: cancelRide
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: CANCELED
        "400":
          description: Cannot cancel a ride that is not in status PENDING or STARTED!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Ride does not exist!

  /api/ride/{id}/panic:
    put:
      tags:
        - ride
      summary: Panic procedure for the ride
      description: Panic procedure for the ride by id. The user will be used from the token (later when we get to security)
      operationId: ridePanic
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/PanicCreate"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PanicDetails"
        "404":
          description: Ride does not exist!

  /api/ride/{id}/start:
    put:
      tags:
        - ride
      summary: Start ride
      description: Start ride
      operationId: rideStart
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: STARTED
        "400":
          description: Cannot start a ride that is not in status ACCEPTED!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Ride does not exist!

  /api/ride/{id}/accept:
    put:
      tags:
        - ride
      summary: Accept ride
      description: Accept ride
      operationId: rideAccept
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: ACCEPTED
        "400":
          description: Cannot accept a ride that is not in status PENDING!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Ride does not exist!

  /api/ride/{id}/end:
    put:
      tags:
        - ride
      summary: End the ride
      description: End the ride
      operationId: rideEnd
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: FINISHED
        "400":
          description: Cannot end a ride that is not in status FINISHED!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Ride does not exist!

  /api/ride/{id}/cancel:
    put:
      tags:
        - ride
      summary: Cancel the ride with an explanation
      description: Cancel the ride with an explanation
      operationId: rideCancel
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  format: string
                  example: No passengers were at the destination
                  maxLength: 500
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Ride"
                  - type: object
                    properties:
                      status:
                        type: string
                        format: string
                        example: REJECTED
        "400":
          description: Cannot cancel a ride that is not in status PENDING!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Ride does not exist!

  /api/ride/favorites:
    post:
      tags:
        - ride
      summary: Create favorite locations for quick selection
      description: Favorite locations
      operationId: favoriteLocationsCreate
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - favoriteName
                  properties:
                    favoriteName:
                      type: string
                      format: string
                      example: Home - to - Work
                      maxLength: 100
                - $ref: "#/components/schemas/RideCreation"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object

                    properties:
                      id:
                        type: integer
                        format: integer
                        example: 123
                      favoriteName:
                        type: string
                        format: string
                        example: Home - to - Work
                  - $ref: "#/components/schemas/RideCreation"
        "400":
          description: Number of favorite rides cannot exceed 10!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - ride
      summary: Get favorite locations
      description: Favorite locations
      operationId: favoriteLocationsGet
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        id:
                          type: integer
                          format: integer
                          example: 123
                        favoriteName:
                          type: string
                          format: string
                          example: Home - to - Work
                    - $ref: "#/components/schemas/RideCreation"

  /api/ride/favorites/{id}:
    delete:
      tags:
        - ride
      summary: Delete existing favorite ride
      description: Favorite locations
      operationId: rideDelete
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Successful deletion of favorite location!
        "404":
          description: Favorite location does not exist!

  /api/panic:
    get:
      tags:
        - panic
      summary: Overview of all panic notifications
      description: Overview of all panic notifications
      operationId: overviewPanic
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: integer
                              example: 10
                            user:
                              $ref: "#/components/schemas/User"
                            ride:
                              $ref: "#/components/schemas/Ride"
                            time:
                              type: string
                              format: date-time
                            reason:
                              type: string
                              example: Driver is drinking while driving

  /api/vehicle/{id}/location:
    put:
      tags:
        - vehicle
      summary: Change location of the vehicle
      description: Change the location of the vehicle. It is different from the main change as it updates only the location at the idea is that if works for frequent changes
      operationId: changeLocationVehicle
      parameters:
        - name: id
          in: path
          description: Id of the vehicle
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/GeoCoordinate"
        required: true
      responses:
        "204":
          description: Coordinates successfully updated
        "400":
          description: Vehicle is not assigned to the specific driver!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Vehicle does not exist!

  /api/user/{id}/changePassword:
    put:
      tags:
        - user
      summary: Change password of a user
      description: When user wants to cahnge his password he must enter old and new password
      operationId: changePassword
      parameters:
        - name: id
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - new_password
                - old_password
              properties:
                new_password:
                  type: string
                  pattern: /^(?=.*\d)(?=.*[A-Z])(?!.*[^a-zA-Z0-9@#$^+=])(.{8,15})$/
                old_password:
                  type: string
                  pattern: /^(?=.*\d)(?=.*[A-Z])(?!.*[^a-zA-Z0-9@#$^+=])(.{8,15})$/
      responses:
        "204":
          description: Password successfully changed!
        "400":
          description: Current password is not matching!
        "404":
          description: User does not exist!

  /api/user/{id}/resetPassword:
    get:
      tags:
        - user
      summary: Reset password of user
      description: When user wants to reset his password, a email will be sent with a code that should allow him the change
      operationId: resetPassword
      parameters:
        - name: id
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Email with reset code has been sent!
        "404":
          description: User does not exist!
    put:
      tags:
        - user
      summary: Change password of a user with the reset code
      description: Similary to changing password, this one does not require old_password, just new_password with code from the email
      operationId: resetPasswordChange
      parameters:
        - name: id
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - new_password
                - code
              properties:
                new_password:
                  type: string
                  pattern: /^(?=.*\d)(?=.*[A-Z])(?!.*[^a-zA-Z0-9@#$^+=])(.{8,15})$/
                code:
                  type: string
                  pattern: /^[0-9]{1,6}$/
      responses:
        "204":
          description: Password successfully changed!
        "400":
          description: Code is expired or not correct!
        "404":
          description: User does not exist!

  /api/user/{id}/ride:
    get:
      tags:
        - user
      summary: Rides of the user
      description: Returns paginated response of rides for a user that can be sorted by a specific field
      operationId: voznjeKorisnika
      parameters:
        - name: id
          in: path
          description: Id of user
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            format: integer
            example: 2
        - in: query
          name: size
          schema:
            type: integer
            format: integer
            example: 2
        - in: query
          name: sort
          schema:
            type: string
            format: string
            example: startTime
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          description: Start of the interval
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          description: End of the interval
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Ride"
        "404":
          description: User does not exist!
  /api/user:
    get:
      tags:
        - user
      summary: Getting user details
      description: Getting multiple of them for the reason of showing a list
      operationId: gettingUsers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Which exact page
        - in: query
          name: size
          schema:
            type: integer
          description: How many elements
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                id:
                                  type: integer
                                  format: integer
                                  example: 10
                            - $ref: "#/components/schemas/User"
  /api/user/login:
    post:
      tags:
        - user
      summary: Log in
      description: Login
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Wrong username or password!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/{id}/message:
    get:
      tags:
        - user
      summary: User messages
      description: Returns a list of user messages
      operationId: listaPoruka
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                id:
                                  type: integer
                                  format: integer
                                  example: 10
                                timeOfSending:
                                  type: string
                                  format: date-time
                                  example: 2022-11-25T17:32:28Z
                                senderId:
                                  type: number
                                  format: number
                                  example: 123
                            - $ref: "#/components/schemas/Message"
        "404":
          description: User does not exist!
    post:
      tags:
        - user
      summary: Send a message to the user
      description: Send a message to the user. The sender is taken from the user that sent the request (from the token)
      operationId: newMessage
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/Message"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        example: 123
                      timeOfSending:
                        type: string
                        format: date-time
                        example: 2022-11-25T17:32:28Z
                      senderId:
                        type: number
                        format: number
                        example: 123
                  - $ref: "#/components/schemas/Message"
        "404":
          description: User does not exist!//Receiver does not exist!//Ride does not exist!
  /api/user/{id}/block:
    put:
      tags:
        - user
      summary: Blocking of the user
      description: Blocking the user from the part of the administrator
      operationId: userBlocking
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User is successfully blocked
        "400":
          description: User already blocked!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User does not exist!
  /api/user/{id}/unblock:
    put:
      tags:
        - user
      summary: Unblocking user
      description: Unblocking user from the administrator
      operationId: userUnblocking
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User is successfully unblocked
        "400":
          description: User is not blocked!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User does not exist!
  /api/user/{id}/note:
    post:
      tags:
        - user
      summary: Note creating
      description: Creaiting note form the part of the administrator, where they can help about ban decisions
      operationId: noteCreating
      requestBody:
        $ref: "#/components/requestBodies/Note"
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        format: integer
                        example: 10
                      date:
                        type: string
                        format: date-time
                        example: 2022-11-25T17:32:28Z
                  - $ref: "#/components/schemas/Note"
        "404":
          description: User does not exist!
    get:
      tags:
        - user
      summary: Getting notes for the user
      description: For a specific user get the paginated response that will return the coresponding notes
      operationId: gettingNotes
      parameters:
        - name: id
          in: path
          description: Id from the user
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
          description: Which exact page
        - in: query
          name: size
          schema:
            type: integer
          description: How many elements on it
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                id:
                                  type: integer
                                  format: integer
                                  example: 10
                                date:
                                  type: string
                                  format: date-time
                                  example: 2022-11-25T17:32:28Z
                            - $ref: "#/components/schemas/Note"
        "404":
          description: User does not exist!
  /api/unregisteredUser/:
    post:
      tags:
        - unregistered user
      summary: Getting the assumption about the time and cost of the ride
      description: Getting the assumption about the time and cost of the ride
      operationId: timeAndCostAssumption
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DrivingAssessment"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  estimatedTimeInMinutes:
                    type: integer
                    format: integer
                    example: 10
                  estimatedCost:
                    type: integer
                    format: integer
                    example: 450

  /api/review/{rideId}/vehicle/{id}:
    post:
      tags:
        - review
      summary: Leave review for the vehicle
      description: Creating a review about the vehicle
      operationId: reviewCreationForVehicle
      parameters:
        - name: id
          in: path
          description: Id of the vehicle
          required: true
          schema:
            type: integer
        - name: rideId
          in: path
          description: Id of the of the ride
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
                - comment
              properties:
                rating:
                  type: integer
                  format: integer
                  example: 3
                  minimum: 1
                  maximum: 10
                comment:
                  type: string
                  format: string
                  example: The vehicle was bad and dirty
                  maxLength: 500

      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: integer
                    example: 123
                  rating:
                    type: integer
                    format: integer
                    example: 3
                    minimum: 1
                    maximum: 10
                  comment:
                    type: string
                    format: string
                    example: The driver was driving really fast
                    maxLength: 500
                  passenger:
                    $ref: "#/components/schemas/UserRef"
        "400":
          description: Vehicle was not on a last ride!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Ride does not exist!//Vehicle does not exist!

  /api/review/vehicle/{id}:
    get:
      tags:
        - review
      summary: Getting the reviews for the vehicle
      description: Get the reviews for the specific vehicle
      operationId: gettingTheReviewForVehicle
      parameters:
        - name: id
          in: path
          description: Id of the vehicle
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: integer
                              example: 123
                            rating:
                              type: integer
                              format: integer
                              example: 3
                              minimum: 1
                              maximum: 10
                            comment:
                              type: string
                              format: string
                              example: The driver was driving too fast
                              maxLength: 500
                            passenger:
                              $ref: "#/components/schemas/UserRef"
        "404":
          description: Vehicle does not exist!

  /api/review/{rideId}/driver/{id}:
    post:
      tags:
        - review
      summary: Leave review for the driver
      description: Creating a review about the driver
      operationId: reviewCreation
      parameters:
        - name: id
          in: path
          description: Id of the driver
          required: true
          schema:
            type: integer
        - name: rideId
          in: path
          description: Id of the of the ride
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
                - comment
              properties:
                rating:
                  type: integer
                  format: integer
                  example: 3
                  minimum: 1
                  maximum: 10
                comment:
                  type: string
                  format: string
                  example: The driver was driving really fast
                  maxLength: 500
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: integer
                    example: 123
                  rating:
                    type: integer
                    format: integer
                    example: 3
                    minimum: 1
                    maximum: 10
                  comment:
                    type: string
                    format: string
                    example: The driver was driving really fast
                    maxLength: 500
                  passenger:
                    $ref: "#/components/schemas/UserRef"
        "400":
          description: Driver was not on a last ride!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Ride does not exist!//Vehicle does not exist!

  /api/review/driver/{id}:
    get:
      tags:
        - review
      summary: Getting the reviews for the driver
      description: Get the reviews for the specific driver
      operationId: gettingTheReview
      parameters:
        - name: id
          in: path
          description: Id of the ride
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: integer
                              example: 123
                            rating:
                              type: integer
                              format: integer
                              example: 3
                              minimum: 1
                              maximum: 10
                            comment:
                              type: string
                              format: string
                              example: The driver was driving too fast
                              maxLength: 500
                            passenger:
                              $ref: "#/components/schemas/UserRef"
        "404":
          description: Driver does not exist!

  /api/review/{rideId}:
    get:
      tags:
        - review
      summary: Getting all reviews for the specific ride
      description: Overview of both reviews for the specific ride (driver and vehicle)
      operationId: gettingReviewsForRide
      parameters:
        - in: path
          name: rideId
          description: Id of the ride
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    vehicleReview:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: integer
                          example: 123
                        rating:
                          type: integer
                          format: integer
                          example: 3
                          minimum: 1
                          maximum: 10
                        comment:
                          type: string
                          format: string
                          example: The vehicle was bad and dirty
                          maxLength: 500
                        passenger:
                          $ref: "#/components/schemas/UserRef"
                    driverReview:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: integer
                          example: 123
                        rating:
                          type: integer
                          format: integer
                          example: 3
                          minimum: 1
                          maximum: 10
                        comment:
                          type: string
                          format: string
                          example: The driver was driving too fast
                          maxLength: 500
                        passenger:
                          $ref: "#/components/schemas/UserRef"
        "404":
          description: Ride does not exist!

components:
  schemas:
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    PaginatedResponse:
      type: object
      properties:
        totalCount:
          type: integer
          format: integer
          example: 243
    UserRef:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: integer
          example: 123
        email:
          type: string
          format: email
          maxLength: 100
    Error:
      type: object
      properties:
        message:
          type: string
          example: Message placeholder (Concrete messages are in description)
    Success:
      type: object
      properties:
        message:
          type: string
          example: Message placeholder (Concrete messages are in description)
    User:
      type: object
      properties:
        name:
          type: string
          example: Pera
          maxLength: 100
        surname:
          type: string
          example: Perić
          maxLength: 100
        profilePicture:
          type: string
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
        telephoneNumber:
          type: string
          example: "+381123123"
          maxLength: 18
        email:
          type: string
          format: email
          example: pera.peric@email.com
          maxLength: 100
        address:
          type: string
          example: Bulevar Oslobodjenja 74
          maxLength: 100
    DriverDocument:
      type: object
      required:
        - name
        - documentImage
        - driverId
      properties:
        name:
          type: string
          example: Vozačka dozvola
          maxLength: 100
        documentImage:
          type: string
          format: byte
          example: U3dhZ2dlciByb2Nrcw=
        driverId:
          type: integer
          format: integer
          example: 10
    DrivingAssessment:
      type: object
      required:
        - locations
        - vehicleType
        - babyTransport
        - petTransport
      properties:
        locations:
          type: array
          description: List of locations which defines the order of the ride
          items:
            $ref: "#/components/schemas/LocationsForRide"
        vehicleType:
          type: string
          example: STANDARD
        babyTransport:
          type: boolean
        petTransport:
          type: boolean
    RideCreation:
      type: object
      required:
        - locations
        - passengers
        - vehicleType
        - babyTransport
        - petTransport
      properties:
        locations:
          type: array
          description: List of locations which defines the order of the ride
          items:
            $ref: "#/components/schemas/LocationsForRide"
        passengers:
          type: array
          description: List of users which are attached to the ride
          items:
            $ref: "#/components/schemas/UserRef"
        vehicleType:
          type: string
          example: STANDARD
          maxLength: 50
        babyTransport:
          type: boolean
        petTransport:
          type: boolean
    LocationsForRide:
      type: object
      required:
        - departure
        - destination
      properties:
        departure:
          $ref: "#/components/schemas/GeoCoordinate"
        destination:
          $ref: "#/components/schemas/GeoCoordinate"
    Ride:
      type: object
      properties:
        id:
          type: integer
          format: integer
          example: 123
        startTime:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        endTime:
          type: string
          format: date-time
          example: 2017-07-21T17:45:14Z
        totalCost:
          type: number
          example: 1235.0
        driver:
          $ref: "#/components/schemas/UserRef"
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/UserRef"
        estimatedTimeInMinutes:
          type: integer
          example: 5
        vehicleType:
          type: string
          example: STANDARD
        babyTransport:
          type: boolean
        petTransport:
          type: boolean
        rejection:
          type: object
          properties:
            reason:
              type: string
              format: string
              example: Ride is canceled due to previous problems with the passenger
            timeOfRejection:
              type: string
              format: date-time
              example: 2022-11-25T17:32:28Z
        locations:
          type: array
          description: List of locations which defines the order of the ride
          items:
            $ref: "#/components/schemas/LocationsForRide"
    Review:
      type: object
      properties:
        id:
          type: integer
          format: integer
          example: 10
        rating:
          type: integer
          format: integer
          example: 5
        comment:
          type: string
          example: Odlična vožnja
        ride:
          $ref: "#/components/schemas/UserRef"
        passenger:
          $ref: "#/components/schemas/UserRef"
    GeoCoordinate:
      type: object
      required:
        - latitude
        - longitude
      properties:
        address:
          type: string
          format: string
          example: Bulevar oslobodjenja 46
        latitude:
          type: number
          example: 45.267136
          minimum: -90
          maximum: 90
        longitude:
          type: number
          example: 19.833549
          minimum: -180
          maximum: 180
    Vehicle:
      type: object
      required:
        - vehicleType
        - model
        - licenseNumber
        - passengerSeats
      properties:
        vehicleType:
          type: string
          example: STANDARD
        model:
          type: string
          example: VW Golf 2
          maxLength: 100
        licenseNumber:
          type: string
          example: NS 123-AB
          maxLength: 20
        currentLocation:
          $ref: "#/components/schemas/GeoCoordinate"
        passengerSeats:
          type: integer
          format: integer
          example: 4
          minimum: 1
          maximum: 20
        babyTransport:
          type: boolean
        petTransport:
          type: boolean
    WorkingHour:
      type: object
      properties:
        id:
          type: integer
          format: integer
          example: 10
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    WorkingHourStart:
      type: object
      required:
        - start
      properties:
        start:
          type: string
          format: date-time
    WorkingHourEnd:
      type: object
      required:
        - end
      properties:
        end:
          type: string
          format: date-time
    PanicCreate:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
          example: Driver is constantly listeting to bad music.
          maxLength: 500
    PanicDetails:
      type: object
      properties:
        id:
          type: integer
          format: integer
          example: 10
        user:
          $ref: "#/components/schemas/User"
        ride:
          $ref: "#/components/schemas/Ride"
        time:
          type: string
          format: date-time
        reason:
          type: string
          example: Driver is drinking while he drives
    AcceptRide:
      type: object
      required:
        - time
      properties:
        time:
          type: string
          format: date-time
    RejectRide:
      type: object
      required:
        - time
        - reason
      properties:
        time:
          type: string
          format: date-time
        reason:
          type: string
          example: Passenger is an old customer and he behvaed really badly last time.
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: pera.peric@email.com
        password:
          type: string
          format: password
          example: sifra123
    Message:
      type: object
      required:
        - receiverId
        - message
        - type
        - rideId
      properties:
        receiverId:
          type: integer
          format: integer
          example: 123
        message:
          type: string
          example: The driver is going on a longer route on purpose
          maxLength: 500
        type:
          type: string
          example: RIDE
        rideId:
          type: integer
          format: integer
          example: 123
    Note:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: The passenger has requested and after that aborted the ride
          maxLength: 500

  requestBodies:
    CreateUser:
      description: Contains informations about the user
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/User"
              - type: object
                required:
                  - name
                  - surname
                  - email
                  - address
                  - password
                properties:
                  password:
                    type: string
                    pattern: /^(?=.*\d)(?=.*[A-Z])(?!.*[^a-zA-Z0-9@#$^+=])(.{8,15})$/
                    example: NekaSifra123

    Note:
      description: Contains informations about the Note
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Note"

    UserDetails:
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  id:
                    type: integer
                    format: integer
                    example: 123
              - $ref: "#/components/schemas/User"

    RideCreation:
      description: Data required for rider creation by user
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/RideCreation"
    DriverDocument:
      description: Data about the document for the driver
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/DriverDocument"
    Vehicle:
      description: Contains the information about the vehicle.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Vehicle"
    WorkingHour:
      description: Contains the information about the working hours of the driver
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WorkingHour"
    WorkingHourStart:
      description: Contains the information about the working hours of the driver
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WorkingHourStart"
    WorkingHourEnd:
      description: Contains the information about the working hours of the driver
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WorkingHourEnd"
    Ride:
      description: Contains the information about the ride
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Ride"
    RideList:
      description: Lista vožnji.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Ride"
    PanicCreate:
      description: Creating panic report
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PanicCreate"
    PanicCreateList:
      description: Panic reports overview
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PanicDetails"
    AcceptRide:
      description: Informations about accepting the ride
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AcceptRide"
    RejectRide:
      description: Informations about rejecting the ride
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RejectRide"
    GeoCoordinate:
      description: Informations about location with latitude and longitude coordinates
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeoCoordinate"
    Login:
      description: User login credentials
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Login"
    Message:
      description: Contains data about the message from one user to another
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    MessageList:
      description: Contains list of data about the message from one user to another
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Message"
